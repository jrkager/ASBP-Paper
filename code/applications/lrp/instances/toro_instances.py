class TORO200:
    m = 10   # number warehouses
    n = 200  # number customers

    # locations in format dict(key, tuple(x, y))
    # where key \in [0,m-1] for WHs and \in [m, m+n-1] for customers
    loc = {
        # warehouses
        0: (12, 39),
        1: (12, 24),
        2: (38, 29),
        3: (32, 43),
        4: (37, 46),
        5: (30, 10),
        6: (60, 10),
        7: (50, 50),
        8: (10, 60),
        9: (65, 30),
        # customer
        10: (4, 20),
        11: (22, 7),
        12: (20, 2),
        13: (21, 7),
        14: (4, 21),
        15: (1, 12),
        16: (4, 2),
        17: (22, 21),
        18: (14, 36),
        19: (16, 40),
        20: (12, 40),
        21: (13, 47),
        22: (15, 36),
        23: (3, 41),
        24: (12, 49),
        25: (6, 43),
        26: (14, 32),
        27: (50, 11),
        28: (29, 18),
        29: (37, 36),
        30: (26, 19),
        31: (27, 33),
        32: (28, 40),
        33: (39, 34),
        34: (29, 31),
        35: (45, 20),
        36: (34, 24),
        37: (27, 39),
        38: (30, 20),
        39: (40, 13),
        40: (51, 15),
        41: (31, 6),
        42: (60, 39),
        43: (33, 23),
        44: (68, 47),
        45: (55, 35),
        46: (52, 58),
        47: (42, 60),
        48: (57, 48),
        49: (25, 31),
        50: (25, 50),
        51: (24, 66),
        52: (23, 17),
        53: (61, 24),
        54: (63, 69),
        55: (10, 9),
        56: (55, 10),
        57: (24, 23),
        58: (47, 62),
        59: (25, 37),
        60: (26, 5),
        61: (39, 8),
        62: (42, 7),
        63: (62, 39),
        64: (49, 58),
        65: (22, 31),
        66: (44, 52),
        67: (24, 32),
        68: (55, 4),
        69: (65, 11),
        70: (60, 68),
        71: (41, 23),
        72: (47, 30),
        73: (9, 23),
        74: (49, 59),
        75: (0, 27),
        76: (51, 40),
        77: (40, 52),
        78: (18, 49),
        79: (28, 52),
        80: (6, 51),
        81: (37, 3),
        82: (33, 55),
        83: (59, 36),
        84: (3, 23),
        85: (25, 67),
        86: (46, 41),
        87: (64, 23),
        88: (11, 11),
        89: (13, 67),
        90: (1, 50),
        91: (63, 27),
        92: (45, 61),
        93: (50, 68),
        94: (53, 69),
        95: (59, 20),
        96: (52, 29),
        97: (7, 0),
        98: (45, 5),
        99: (40, 5),
        100: (5, 47),
        101: (69, 63),
        102: (11, 65),
        103: (3, 43),
        104: (0, 49),
        105: (6, 29),
        106: (68, 25),
        107: (31, 22),
        108: (37, 15),
        109: (19, 52),
        110: (15, 67),
        111: (39, 31),
        112: (67, 41),
        113: (37, 45),
        114: (58, 66),
        115: (1, 63),
        116: (19, 45),
        117: (13, 20),
        118: (29, 2),
        119: (38, 64),
        120: (65, 28),
        121: (1, 11),
        122: (16, 62),
        123: (40, 13),
        124: (47, 5),
        125: (11, 21),
        126: (43, 26),
        127: (61, 21),
        128: (13, 58),
        129: (45, 23),
        130: (28, 61),
        131: (51, 14),
        132: (59, 35),
        133: (39, 26),
        134: (34, 42),
        135: (62, 23),
        136: (43, 22),
        137: (44, 57),
        138: (69, 29),
        139: (16, 27),
        140: (15, 55),
        141: (55, 4),
        142: (60, 66),
        143: (0, 11),
        144: (4, 51),
        145: (68, 23),
        146: (46, 50),
        147: (10, 52),
        148: (67, 50),
        149: (26, 65),
        150: (32, 5),
        151: (28, 50),
        152: (10, 42),
        153: (56, 24),
        154: (11, 0),
        155: (25, 10),
        156: (12, 37),
        157: (56, 52),
        158: (36, 15),
        159: (49, 28),
        160: (8, 0),
        161: (17, 21),
        162: (36, 47),
        163: (34, 64),
        164: (14, 56),
        165: (7, 66),
        166: (68, 1),
        167: (63, 69),
        168: (63, 36),
        169: (44, 2),
        170: (35, 28),
        171: (20, 6),
        172: (62, 9),
        173: (51, 22),
        174: (60, 50),
        175: (55, 31),
        176: (36, 30),
        177: (64, 58),
        178: (50, 22),
        179: (4, 13),
        180: (11, 67),
        181: (51, 17),
        182: (69, 17),
        183: (9, 38),
        184: (22, 64),
        185: (37, 1),
        186: (22, 50),
        187: (46, 7),
        188: (44, 44),
        189: (33, 52),
        190: (55, 27),
        191: (56, 56),
        192: (18, 46),
        193: (33, 53),
        194: (64, 23),
        195: (19, 17),
        196: (28, 7),
        197: (62, 63),
        198: (26, 47),
        199: (5, 42),
        200: (5, 55),
        201: (15, 47),
        202: (34, 3),
        203: (55, 13),
        204: (61, 52),
        205: (28, 10),
        206: (50, 4),
        207: (26, 56),
        208: (37, 1),
        209: (50, 16)
    }

    Q = 20  # capacity of vehicle

    # capacity of warehouse
    C_i = {
        0: 120,
        1: 100,
        2: 80,
        3: 80,
        4: 80,
        5: 70,
        6: 60,
        7: 100,
        8: 80,
        9: 80
    }

    # open warehouse costs. dict with keys as in loc
    f_i = {
        0: 1346,
        1: 1383,
        2: 1066,
        3: 513,
        4: 558,
        5: 600,
        6: 500,
        7: 1000,
        8: 550,
        9: 600
    }

    # cost to maintain warehouse (per size)
    d_i = { # cost per size is approx. 1/10 of f_i
        0: 135,
        1: 138,
        2: 107,
        3: 51,
        4: 56,
        5: 60,
        6: 50,
        7: 100,
        8: 55,
        9: 60
    }

    # nominal demand. dict with keys as in loc
    beta_j = {
      10: 5,
      11: 3,
      12: 5,
      13: 5,
      14: 4,
      15: 3,
      16: 5,
      17: 4,
      18: 3,
      19: 4,
      20: 5,
      21: 3,
      22: 5,
      23: 4,
      24: 3,
      25: 5,
      26: 3,
      27: 5,
      28: 5,
      29: 3,
      30: 5,
      31: 5,
      32: 3,
      33: 4,
      34: 5,
      35: 3,
      36: 5,
      37: 3,
      38: 5,
      39: 5,
      40: 3,
      41: 1,
      42: 3,
      43: 4,
      44: 4,
      45: 2,
      46: 3,
      47: 2,
      48: 2,
      49: 2,
      50: 3,
      51: 3,
      52: 3,
      53: 3,
      54: 1,
      55: 3,
      56: 3,
      57: 2,
      58: 2,
      59: 1,
      60: 4,
      61: 1,
      62: 2,
      63: 2,
      64: 3,
      65: 3,
      66: 4,
      67: 4,
      68: 1,
      69: 2,
      70: 2,
      71: 2,
      72: 4,
      73: 4,
      74: 4,
      75: 4,
      76: 4,
      77: 2,
      78: 3,
      79: 3,
      80: 4,
      81: 2,
      82: 1,
      83: 1,
      84: 2,
      85: 2,
      86: 3,
      87: 4,
      88: 2,
      89: 4,
      90: 3,
      91: 3,
      92: 3,
      93: 1,
      94: 3,
      95: 3,
      96: 1,
      97: 3,
      98: 4,
      99: 3,
      100: 3,
      101: 3,
      102: 2,
      103: 4,
      104: 3,
      105: 2,
      106: 1,
      107: 4,
      108: 1,
      109: 3,
      110: 3,
      111: 4,
      112: 2,
      113: 4,
      114: 1,
      115: 1,
      116: 1,
      117: 3,
      118: 4,
      119: 1,
      120: 2,
      121: 4,
      122: 3,
      123: 1,
      124: 2,
      125: 3,
      126: 1,
      127: 4,
      128: 2,
      129: 1,
      130: 4,
      131: 1,
      132: 1,
      133: 3,
      134: 2,
      135: 4,
      136: 3,
      137: 1,
      138: 2,
      139: 3,
      140: 4,
      141: 3,
      142: 2,
      143: 1,
      144: 2,
      145: 2,
      146: 4,
      147: 3,
      148: 3,
      149: 2,
      150: 1,
      151: 3,
      152: 4,
      153: 3,
      154: 1,
      155: 1,
      156: 3,
      157: 4,
      158: 2,
      159: 2,
      160: 2,
      161: 3,
      162: 1,
      163: 4,
      164: 1,
      165: 4,
      166: 2,
      167: 2,
      168: 4,
      169: 3,
      170: 1,
      171: 4,
      172: 3,
      173: 2,
      174: 4,
      175: 2,
      176: 2,
      177: 1,
      178: 2,
      179: 2,
      180: 1,
      181: 1,
      182: 1,
      183: 1,
      184: 4,
      185: 3,
      186: 1,
      187: 1,
      188: 2,
      189: 2,
      190: 4,
      191: 3,
      192: 3,
      193: 4,
      194: 2,
      195: 4,
      196: 3,
      197: 2,
      198: 1,
      199: 4,
      200: 1,
      201: 2,
      202: 2,
      203: 1,
      204: 3,
      205: 3,
      206: 2,
      207: 2,
      208: 2,
      209: 1
    }

    F = 100  # cost to open route

    alpha = 0.0635 # gallon per km of empty vehicle travelled
    # alpha1 obtained traveling 15.81 km per gallon in an empty vehicle
    gamma = 0.001004 # = 0.02008 / Q # gallon per km and ton load (= 1/12 - 1/15.81)
    # alpha2 obtained traveling 12 km per gallon in a full vehicle

    unitary_cost_fuel = 3.92 # USD per gallon; in the paper it's 6.92 but 3.92 is more reasonable
    emissions_per_fuel_unit = 8.706 # kg CO2 per gallon
    cost_emissions = 0.009 # USD per kg CO2
